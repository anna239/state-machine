package statemachine.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import statemachine.behavior.StateMachine_Behavior;

public class IsInStateOperation_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_jhamvi_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:79bc8d31-47a9-4116-8145-b23268aa7dd0(statemachine.constraints)", "6463807888000016336");

  public IsInStateOperation_Constraints() {
    super("statemachine.structure.IsInStateOperation");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("state", new BaseReferenceConstraintsDescriptor("state", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode operand = IOperation_Behavior.call_getOperand_1213877410070(_context.getReferenceNode());
            SNode node = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(operand), HUtil.createMatchingPatternByConceptFQName("statemachine.structure.StateMachineType"), true);
            SNode stateMachine = SLinkOperations.getTarget(node, "stateMachine", false);
            return StateMachine_Behavior.call_getAllStates_2903037320963927292(stateMachine);
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_jhamvi_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
