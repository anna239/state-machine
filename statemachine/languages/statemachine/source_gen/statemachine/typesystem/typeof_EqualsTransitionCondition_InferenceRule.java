package statemachine.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_EqualsTransitionCondition_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_EqualsTransitionCondition_InferenceRule() {
  }

  public void applyRule(final SNode condition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode stateMachine = SNodeOperations.as(SNodeOperations.getParent(SNodeOperations.getParent(SNodeOperations.getParent(condition))), "statemachine.structure.StateMachine");
    System.out.println(stateMachine);
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(condition, "expression", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e8632312-5c38-45e4-b922-b0dc11caad25(statemachine.typesystem)", "3047195635420720993", 0, null);
      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e8632312-5c38-45e4-b922-b0dc11caad25(statemachine.typesystem)", "3047195635420720944", true), (SNode) SLinkOperations.getTarget(stateMachine, "type", true), false, true, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "statemachine.structure.EqualsTransitionCondition";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
