package statemachine.sandbox.sandbox;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class Ma {
  private Ma.MachineState currentState;

  public Ma() {
    currentState = statemachine.sandbox.sandbox.Ma.MachineState.ff;
  }

  public void addNextToken(String token) {
    currentState = getNextState(token);
  }

  private Ma.MachineState getNextState(String token) {
    switch (currentState) {
      case f1:
        
        {
          _FunctionTypes._return_P1_E0<? extends Boolean, ? super String> condition = new _FunctionTypes._return_P1_E0<Boolean, String>() {
            public Boolean invoke(String s) {
              return (s == null || s.length() == 0);
            }
          };
          if (condition.invoke(token)) {
            return null;
          }
        };
        break;
      case f2:
        
        {
          String condition = "hi";
          if (token.equals(condition)) {
            return null;
          }
        };
        break;
      case ff:
        
        {
          String condition = "  ";
          if (token.equals(condition)) {
            return null;
          }
        };
        break;
      default:
    }
    throw new IllegalArgumentException("bad token: " + token);
  }

  public boolean isInState(Ma.MachineState state) {
    return currentState == state;
  }

  public static   enum MachineState {
    f1(),
    f2(),
    ff();

    MachineState() {
    }
  }
}
