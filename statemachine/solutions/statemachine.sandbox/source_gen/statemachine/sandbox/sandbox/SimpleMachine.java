package statemachine.sandbox.sandbox;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class SimpleMachine {
  private SimpleMachine.MachineState currentState;

  public SimpleMachine() {
    currentState = statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyA;
  }

  public void addNextToken(String token) {
    currentState = getNextState(token);
  }

  private SimpleMachine.MachineState getNextState(String token) {
    switch (currentState) {
      case aOrB:
        {
          _FunctionTypes._return_P1_E0<? extends Boolean, ? super String> condition = new _FunctionTypes._return_P1_E0<Boolean, String>() {
            public Boolean invoke(String it) {
              return Main.isOk(it);
            }
          };
          if (condition.invoke(token)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.aOrB;
          }
        }
        {
          String condition = "b";
          if (token.equals(condition)) {
            
            {
              _FunctionTypes._void_P1_E0<? super String> onChange = null;
              onChange.invoke(token);
            };
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyB;
          }
        }
        break;
      case onlyB:
        {
          String condition = "b";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyB;
          }
        }
        break;
      case onlyA:
        {
          String condition = "a";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.aOrB;
          }
        }
        break;
      default:
    }
    throw new IllegalArgumentException("bad token: " + token);
  }

  public boolean isInState(SimpleMachine.MachineState state) {
    return currentState == state;
  }

  public boolean isInFinalState() {
    return currentState.isFinal;
  }

  public static   enum MachineState {
    aOrB(false),
    onlyB(true),
    onlyA(false);

    /*package*/ final boolean isFinal;

    MachineState(boolean isFinal) {
      this.isFinal = isFinal;
    }
  }
}
