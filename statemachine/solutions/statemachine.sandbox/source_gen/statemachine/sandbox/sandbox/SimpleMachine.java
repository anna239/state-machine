package statemachine.sandbox.sandbox;

/*Generated by MPS */


public class SimpleMachine {
  private SimpleMachine.MachineState currentState;

  public SimpleMachine() {
    currentState = statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyA;
  }

  public void addNextToken(String token) {
    currentState = getNextState(token);
  }

  private SimpleMachine.MachineState getNextState(String token) {
    switch (currentState) {
      case aOrB:
        {
          String condition = "a";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.aOrB;
          }
        }
        {
          String condition = "b";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyB;
          }
        }
        break;
      case onlyB:
        {
          String condition = "b";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.onlyB;
          }
        }
        break;
      case onlyA:
        {
          String condition = "a";
          if (token.equals(condition)) {
            return statemachine.sandbox.sandbox.SimpleMachine.MachineState.aOrB;
          }
        }
        break;
      default:
    }
    throw new IllegalArgumentException("bad token: " + token);
  }

  public boolean isInState(SimpleMachine.MachineState state) {
    return currentState == state;
  }

  public static   enum MachineState {
    aOrB(),
    onlyB(),
    onlyA();

    MachineState() {
    }
  }
}
